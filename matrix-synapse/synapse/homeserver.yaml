#just excerpts!

#enable redis
redis:
  enabled: true
  host: "redis"

#federation senders
federation_sender_instances:
  - federation_sender_1
  - federation_sender_2
  - federation_sender_3
  - federation_sender_4
worker_replication_secret: "mambo#5"

#stream writers
stream_writers:
  events: stream_writer_2
  typing: stream_writer_1
  to_device: stream_writer_1
  account_data: stream_writer_1
  receipts: stream_writer_1
  presence: stream_writer_1
  push_rules: stream_writer_1
  device_lists: stream_writer_1

#background worker
run_background_tasks_on: background_worker_1
notify_appservices_from_worker: background_worker_1
update_user_directory_from_worker: background_worker_1
pusher_instances:
  - background_worker_1

#instance map
instance_map:
  main:
    path: "/sockets/synapse_replication_main.sock"
  stream_writer_1:
    path: "/sockets/synapse_worker-stream-writer.sock"
  stream_writer_2:
    path: "/sockets/synapse_worker-stream-writer-2.sock"
  federation_reader_1:
    path: "/sockets/synapse_worker-federation-reader.sock"
  background_worker_1:
    path: "/sockets/synapse_worker-background-worker.sock"

#listeners
listeners:
  - ...
  - type: http
    path: "/sockets/synapse_replication_main.sock"
    resources:
      - names: [replication]
        compress: false

#element call
experimental_features:
  # MSC3266: Room summary API. Used for knocking over federation
  msc3266_enabled: true
  # MSC4222 needed for syncv2 state_after. This allow clients to
  # correctly track the state of the room.
  msc4222_enabled: true
  #msc4140
  msc4140_enabled: true
# The maximum allowed duration by which sent events can be delayed, as
# per MSC4140.
max_event_delay_duration: 24h

rc_message:
  # This needs to match at least e2ee key sharing frequency plus a bit of headr>
  # Note key sharing events are bursty
  per_second: 0.5
  burst_count: 30

rc_delayed_event_mgmt:
  # This needs to match at least the heart-beat frequency plus a bit of headroom
  # Currently the heart-beat is every 5 seconds which translates into a rate of>
  per_second: 1
  burst_count: 20
